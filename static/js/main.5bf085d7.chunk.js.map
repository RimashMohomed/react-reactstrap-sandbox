{"version":3,"sources":["logo.svg","editor/ExpressionBuilder.jsx","editor/CustomInputCapture.jsx","editor/CaptureGroupBuilder.jsx","editor/CapturePatternBuilder.jsx","editor/FieldDefBuilder.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","reorder","list","startIndex","endIndex","result","Array","from","splice","removed","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","index","symbol","symbolCount","symbolId","id","parseInt","split","newSymbol","cloneSymbol","length","droppableId","getItemStyle","isDragging","draggableStyle","userSelect","padding","grid","margin","background","getListStyle","isDraggingOver","display","overflow","CustomInputCapture","Component","props","handleChange","bind","state","value","event","console","log","this","ref","target","setState","InputGroup","Input","type","disabled","onChange","myRef","placeholder","content","CaptureGroupBuilder","symbols","editable","id2List","droppable","droppable2","getList","onDragEnd","items","selected","handleValidSubmit","handleInvalidSubmit","addNewRule","removeRule","uuid","groupUUID","prefix","undefined","text","postfix","freezeGroup","capturePattern","React","createRef","values","groupCapturedId","freezeGroupId","pattern","map","item","current","_addNewRule","_removeRule","Fragment","onValidSubmit","onInvalidSubmit","Row","className","Col","md","xs","direction","provided","snapshot","innerRef","style","key","draggableId","draggableProps","dragHandleProps","Button","color","tag","CustomInput","name","label","onClick","icon","faPlus","faMinus","CapturePatternBuilder","currentID","addFirstGroup","generateCapturePattern","captureGroups","output","groups","patternStr","capture","captureGroup","push","tokens","match","RegExp","shift","token","join","nextGroupIndex","groupIndex","currentGroupIndex","prefixOptions","postfixOptions","Toast","ToastHeader","ToastBody","FieldDefBuilder","telegramMessage","FormGroup","validate","required","errorMessage","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5bf085d7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport { Row, Col, InputGroup,InputGroupAddon, InputGroupText, Input } from \"reactstrap\";\r\n\r\n\r\n// fake data generator\r\nconst getItems = (count, offset = 0) =>\r\n    Array.from({ length: count }, (v, k) => k).map(k => ({\r\n        id: `item-${k + offset}`,\r\n        content: `item ${k + offset}`\r\n    }));\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n    const result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n\r\n    return result;\r\n};\r\n\r\nconst cloneSymbol = (symbol, symbolCount) => {\r\n    const symbolId = symbol['id'];\r\n    const id = parseInt(symbolId.split('-')[1]);\r\n\r\n    const newSymbol = {...symbol}\r\n    newSymbol['id'] = `item-${id + symbolCount}`        \r\n       \r\n    // console.log(\"newSymbol \", newSymbol);\r\n    return newSymbol;\r\n}\r\n\r\n/**\r\n * Moves an item from one list to another list.\r\n */\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n    const sourceClone = Array.from(source);\r\n    const destClone = Array.from(destination);\r\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n    destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n    sourceClone.splice(droppableSource.index, 0, cloneSymbol(removed, source.length));\r\n\r\n    const result = {};\r\n    result[droppableSource.droppableId] = sourceClone;\r\n    result[droppableDestination.droppableId] = destClone;\r\n\r\n    return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n    // some basic styles to make the items look a bit nicer\r\n    userSelect: 'none',\r\n    padding: grid * 2,\r\n    margin: `0 0 ${grid}px 0`,\r\n\r\n    // change background colour if dragging\r\n    background: isDragging ? 'lightgreen' : 'grey',\r\n\r\n    // styles we need to apply on draggables\r\n    ...draggableStyle\r\n});\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n    background: isDraggingOver ? 'lightblue' : 'lightgrey',\r\n    display: 'flex',\r\n    padding: grid,\r\n    overflow: 'auto',\r\n});\r\n\r\nclass ExpressionBuilder extends Component {\r\n    symbols = [\r\n        {\r\n            id: `item-1`,\r\n            content: `Space`,\r\n            editable: false\r\n        },\r\n        {\r\n            id: `item-2`,\r\n            content: `Specific Text`,\r\n            editable: true\r\n        },\r\n        {\r\n            id: `item-3`,\r\n            content: `Specific Number`,\r\n            editable: true\r\n        },\r\n        {\r\n            id: `item-4`,\r\n            content: `Number`,\r\n            editable: false\r\n\r\n        },\r\n        {\r\n            id: `item-5`,\r\n            content: `String`,\r\n            editable: false\r\n\r\n        },\r\n        {\r\n            id: `item-6`,\r\n            content: `OR`,\r\n            editable: false\r\n        }\r\n    ];\r\n    state = {\r\n        items: this.symbols,\r\n        selected: [{\r\n            id: `item-0`,\r\n            content: `Start`,\r\n            editable: false\r\n        }]\r\n    };\r\n\r\n    /**\r\n     * A semi-generic way to handle multiple lists. Matches\r\n     * the IDs of the droppable container to the names of the\r\n     * source arrays stored in the state.\r\n     */\r\n    id2List = {\r\n        droppable: 'items',\r\n        droppable2: 'selected'\r\n    };\r\n\r\n    getList = id => this.state[this.id2List[id]];\r\n\r\n    onDragEnd = result => {\r\n        const { source, destination } = result;\r\n\r\n        // dropped outside the list\r\n        if (!destination) {\r\n            return;\r\n        }\r\n\r\n        if (source.droppableId === destination.droppableId) {\r\n            const items = reorder(\r\n                this.getList(source.droppableId),\r\n                source.index,\r\n                destination.index\r\n            );\r\n\r\n            let state = { items };\r\n\r\n            if (source.droppableId === 'droppable2') {\r\n                state = { selected: items };\r\n            }\r\n\r\n            this.setState(state);\r\n        } else {\r\n            if (source.droppableId === 'droppable') {\r\n                const result = move(\r\n                    this.getList(source.droppableId),\r\n                    this.getList(destination.droppableId),\r\n                    source,\r\n                    destination\r\n                );\r\n\r\n                this.setState({\r\n                    items: result.droppable,\r\n                    selected: result.droppable2\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    // Normally you would want to split things out into separate components.\r\n    // But in this example everything is just done in one place for simplicity\r\n    render() {\r\n        return (\r\n            <DragDropContext onDragEnd={this.onDragEnd}>\r\n                <Row>\r\n                    <Col>\r\n                        <Droppable droppableId=\"droppable\" direction=\"horizontal\">\r\n                            {(provided, snapshot) => (\r\n                                <div\r\n                                    ref={provided.innerRef}\r\n                                    style={getListStyle(snapshot.isDraggingOver)}>\r\n                                    {this.state.items.map((item, index) => (\r\n                                        <Draggable\r\n                                            key={item.id}\r\n                                            draggableId={item.id}\r\n                                            index={index}>\r\n                                            {(provided, snapshot) => (\r\n                                                <div\r\n                                                    ref={provided.innerRef}\r\n                                                    {...provided.draggableProps}\r\n                                                    {...provided.dragHandleProps}\r\n                                                    style={getItemStyle(\r\n                                                        snapshot.isDragging,\r\n                                                        provided.draggableProps.style\r\n                                                    )}>\r\n                                                    {item.content}\r\n                                                </div>\r\n                                            )}\r\n                                        </Draggable>\r\n                                    ))}\r\n                                    {provided.placeholder}\r\n                                </div>\r\n                            )}\r\n                        </Droppable>\r\n                    </Col>\r\n\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Droppable droppableId=\"droppable2\" direction=\"horizontal\">\r\n                            {(provided, snapshot) => (\r\n                                <div\r\n                                    ref={provided.innerRef}\r\n                                    style={getListStyle(snapshot.isDraggingOver)}>\r\n                                    {this.state.selected.map((item, index) => (\r\n                                        <Draggable\r\n                                            key={item.id}\r\n                                            draggableId={item.id}\r\n                                            index={index}>\r\n                                            {(provided, snapshot) => (\r\n                                                <div\r\n                                                    ref={provided.innerRef}\r\n                                                    {...provided.draggableProps}\r\n                                                    {...provided.dragHandleProps}\r\n                                                    style={getItemStyle(\r\n                                                        snapshot.isDragging,\r\n                                                        provided.draggableProps.style\r\n                                                    )}>\r\n\r\n                                                    { \r\n                                                        item.editable ? \r\n                                                            <InputGroup>\r\n                                                                <Input placeholder={item.content} />\r\n                                                            </InputGroup>\r\n                                                        : item.content\r\n                                                    }\r\n                                                </div>\r\n                                            )}\r\n                                        </Draggable>\r\n                                    ))}\r\n                                    {provided.placeholder}\r\n                                </div>\r\n                            )}\r\n                        </Droppable>\r\n                    </Col>\r\n                </Row>\r\n\r\n\r\n            </DragDropContext>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ExpressionBuilder;\r\n\r\n","import React, { Component } from 'react';\r\nimport { InputGroup, Input } from \"reactstrap\";\r\n\r\nclass CustomInputCapture extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.state = {\r\n            value: ''\r\n        }\r\n    }\r\n\r\n    handleChange(event) {\r\n        console.log(\"VVVVVVV \", this.props.ref, event.target.value);\r\n        this.setState({\r\n            value: event.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <InputGroup>\r\n                <Input type={this.props.type} disabled={this.props.disabled} value={this.state.value} onChange={this.handleChange} ref={this.props.myRef} placeholder={this.props.content}/>\r\n            </InputGroup>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CustomInputCapture;\r\n","import React, { Component } from 'react';\r\nimport { Row, Col, CustomInput, FormGroup, Toast, ToastHeader, ToastBody, Button, Badge, Label, InputGroup, InputGroupAddon, InputGroupText, Input } from \"reactstrap\";\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\nimport { AvForm, AvField, AvInput } from 'availity-reactstrap-validation';\r\nimport AvGroup from 'availity-reactstrap-validation/lib/AvGroup';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPlus, faMinus } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport ExpressionBuilder from './ExpressionBuilder';\r\nimport CustomInputCapture from './CustomInputCapture';\r\n\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n    const result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n\r\n    return result;\r\n};\r\n\r\nconst cloneSymbol = (symbol, symbolCount) => {\r\n    const symbolId = symbol['id'];\r\n    const id = parseInt(symbolId.split('-')[1]);\r\n\r\n    const newSymbol = { ...symbol }\r\n    newSymbol['id'] = `item-${id + symbolCount}`\r\n\r\n    // console.log(\"newSymbol \", newSymbol);\r\n    return newSymbol;\r\n}\r\n\r\n/**\r\n * Moves an item from one list to another list.\r\n */\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n    const sourceClone = Array.from(source);\r\n    const destClone = Array.from(destination);\r\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n    destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n    sourceClone.splice(droppableSource.index, 0, cloneSymbol(removed, source.length));\r\n\r\n    const result = {};\r\n    result[droppableSource.droppableId] = sourceClone;\r\n    result[droppableDestination.droppableId] = destClone;\r\n\r\n    return result;\r\n};\r\n\r\nconst grid = 6;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n    // some basic styles to make the items look a bit nicer\r\n    userSelect: 'none',\r\n    padding: grid * 2,\r\n    margin: `0 0 ${grid}px 0`,\r\n\r\n    // change background colour if dragging\r\n    background: isDragging ? 'lightgreen' : 'grey',\r\n\r\n    // styles we need to apply on draggables\r\n    ...draggableStyle\r\n});\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n    background: isDraggingOver ? 'lightblue' : 'lightgrey',\r\n    display: 'flex',\r\n    padding: grid,\r\n    overflow: 'auto',\r\n});\r\nclass CaptureGroupBuilder extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleValidSubmit = this.handleValidSubmit.bind(this);\r\n        this.handleInvalidSubmit = this.handleInvalidSubmit.bind(this);\r\n        this.addNewRule = this.addNewRule.bind(this);\r\n        this.removeRule = this.removeRule.bind(this);\r\n\r\n        this.state = {\r\n            uuid: props.groupUUID,\r\n            prefix: undefined,\r\n            text: undefined,\r\n            postfix: undefined,\r\n            freezeGroup: false,\r\n            capturePattern: undefined,\r\n            items: this.symbols,\r\n            selected: [{\r\n                id: `item-0`,\r\n                content: `Start`,\r\n                editable: false,\r\n                value: \"\",\r\n                ref: React.createRef()\r\n            }]\r\n        }\r\n    }\r\n\r\n\r\n\r\n    handleValidSubmit(event, values) {\r\n        console.log(\"handleValidSubmit \", event, values);\r\n        const groupCapturedId = `groupCaptured-${this.props.groupUUID}`;\r\n        const freezeGroupId = `freezeGroup-${this.props.groupUUID}`;\r\n        const customInputId = `customInput-${this.props.groupUUID}`;\r\n\r\n        let pattern = \"\"\r\n        this.state.selected.map((item, index) => {\r\n            if(item.editable) {\r\n                if(item.ref && item.ref.current && item.ref.current.props && item.ref.current.props.value !== \"\") {\r\n                    console.log(\"Value Ref2 \", item.ref.current.props.value);\r\n                    pattern +=  item.ref.current.props.value;\r\n\r\n                } else {\r\n                    console.log(\"Emty Ref2 \", item);    \r\n\r\n                } \r\n            } else {\r\n                pattern += item.value;\r\n            }\r\n        })\r\n\r\n        this.setState({\r\n            freezeGroup: values[freezeGroupId],\r\n            capturePattern: values[groupCapturedId],\r\n            pattern: `(${pattern})`\r\n        })\r\n    }\r\n\r\n    handleInvalidSubmit(event, values) {\r\n        console.log(\"handleInvalidSubmit \", event, values);\r\n        // this.props._handleInValidSubmit(this.props.groupUUID, values);\r\n    }\r\n\r\n    addNewRule() {\r\n        // console.log(\"addNewRule event triggered from\");\r\n        this.props._addNewRule(this.props.groupUUID);\r\n    }\r\n\r\n    removeRule() {\r\n        // console.log(\"removeRule\");\r\n        this.props._removeRule(this.props.groupUUID);\r\n    }\r\n\r\n    symbols = [\r\n        {\r\n            id: `item-1`,\r\n            content: `Space`,\r\n            value: `\\\\\\s*`,\r\n            editable: false\r\n        },\r\n        {\r\n            id: `item-2`,\r\n            content: `Specific Text`,\r\n            value: '',\r\n            editable: true,\r\n            type: \"text\"\r\n        },\r\n        {\r\n            id: `item-3`,\r\n            content: `Specific Number`,\r\n            value: '',\r\n            editable: true,\r\n            type: \"number\"\r\n        },\r\n        {\r\n            id: `item-4`,\r\n            content: `Number`,\r\n            value: '[0-9,.]+',\r\n            editable: false\r\n\r\n        },\r\n        {\r\n            id: `item-5`,\r\n            content: `String`,\r\n            value: '[a-z,A-Z]+',\r\n            editable: false\r\n\r\n        },\r\n        {\r\n            id: `item-6`,\r\n            content: `OR`,\r\n            value: '|',\r\n            editable: false\r\n        }\r\n    ];\r\n\r\n    /**\r\n     * A semi-generic way to handle multiple lists. Matches\r\n     * the IDs of the droppable container to the names of the\r\n     * source arrays stored in the state.\r\n     */\r\n    id2List = {\r\n        droppable: 'items',\r\n        droppable2: 'selected'\r\n    };\r\n\r\n    getList = id => this.state[this.id2List[id]];\r\n\r\n    onDragEnd = result => {\r\n        const { source, destination } = result;\r\n\r\n        // dropped outside the list\r\n        if (!destination) {\r\n            return;\r\n        }\r\n\r\n        if (source.droppableId === destination.droppableId) {\r\n            const items = reorder(\r\n                this.getList(source.droppableId),\r\n                source.index,\r\n                destination.index\r\n            );\r\n\r\n            let state = { items };\r\n\r\n            if (source.droppableId === 'droppable2') {\r\n                state = { selected: items };\r\n            }\r\n\r\n            this.setState(state);\r\n        } else {\r\n            if (source.droppableId === 'droppable') {\r\n                const result = move(\r\n                    this.getList(source.droppableId),\r\n                    this.getList(destination.droppableId),\r\n                    source,\r\n                    destination\r\n                );\r\n\r\n                this.setState({\r\n                    items: result.droppable,\r\n                    selected: result.droppable2\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <AvForm\r\n                    onValidSubmit={this.handleValidSubmit}\r\n                    onInvalidSubmit={this.handleInvalidSubmit}>\r\n\r\n                    <Row className=\"mb-2 mt-2 ml-2 mr-2\">\r\n                        <Col md=\"10\" xs=\"12\">\r\n                            <DragDropContext onDragEnd={this.onDragEnd}>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Droppable droppableId=\"droppable\" direction=\"horizontal\">\r\n                                            {(provided, snapshot) => (\r\n                                                <div\r\n                                                    ref={provided.innerRef}\r\n                                                    style={getListStyle(snapshot.isDraggingOver)}>\r\n                                                    {this.state.items.map((item, index) => (\r\n                                                        <Draggable\r\n                                                            key={item.id}\r\n                                                            draggableId={item.id}\r\n                                                            index={index}>\r\n                                                            {(provided, snapshot) => (\r\n                                                                <div\r\n                                                                    ref={provided.innerRef}\r\n                                                                    {...provided.draggableProps}\r\n                                                                    {...provided.dragHandleProps}\r\n                                                                    style={getItemStyle(\r\n                                                                        snapshot.isDragging,\r\n                                                                        provided.draggableProps.style\r\n                                                                    )}>\r\n                                                                    {item.content}\r\n                                                                </div>\r\n                                                            )}\r\n                                                        </Draggable>\r\n                                                    ))}\r\n                                                    {provided.placeholder}\r\n                                                </div>\r\n                                            )}\r\n                                        </Droppable>\r\n                                    </Col>\r\n\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col>\r\n                                    <AvGroup>\r\n\r\n                                        <Droppable droppableId=\"droppable2\" direction=\"horizontal\">\r\n                                            {(provided, snapshot) => (\r\n                                                <div\r\n                                                    ref={provided.innerRef}\r\n                                                    style={getListStyle(snapshot.isDraggingOver)}>\r\n                                                    {this.state.selected.map((item, index) => (\r\n                                                        <Draggable\r\n                                                            key={item.id}\r\n                                                            draggableId={item.id}\r\n                                                            index={index}>\r\n                                                            {(provided, snapshot) => (\r\n                                                                <div\r\n                                                                    ref={provided.innerRef}\r\n                                                                    {...provided.draggableProps}\r\n                                                                    {...provided.dragHandleProps}\r\n                                                                    style={getItemStyle(\r\n                                                                        snapshot.isDragging,\r\n                                                                        provided.draggableProps.style\r\n                                                                    )}>\r\n                                                                        {\r\n                                                                           item['ref'] = React.createRef(),\r\n                                                                        \r\n\r\n                                                                    \r\n                                                                        \r\n\r\n                                                                        item.editable ? \r\n                                                                            <CustomInputCapture type={item.type} disabled={this.state.freezeGroup ? true : false} myRef={item.ref} placeholder={item.content}/>\r\n                                                                            : item.content\r\n\r\n                                                                        \r\n                                                                    }\r\n                                                                </div>\r\n                                                            )}\r\n                                                        </Draggable>\r\n                                                    ))}\r\n                                                    {provided.placeholder}\r\n                                                </div>\r\n                                            )}\r\n                                        </Droppable>\r\n                                        </AvGroup>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n\r\n                            </DragDropContext>\r\n                        </Col>\r\n                        <Col md=\"2\" xs=\"12\">\r\n                            <AvGroup >\r\n                                <Row className=\"mb-2\">\r\n                                    <Col md=\"12\" xs=\"12\">\r\n                                        <Button id=\"button-fluid\" color=\"secondary\">\r\n                                            <AvInput disabled={this.state.freezeGroup ? true : false} tag={CustomInput} type=\"checkbox\" name={`freezeGroup-${this.props.groupUUID}`} label=\"Freeze\" />\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row className=\"mb-2\">\r\n                                    <Col md=\"12\" xs=\"12\">\r\n                                        <Button id=\"button-fluid\" color=\"secondary\">\r\n                                            <AvInput disabled={this.state.freezeGroup ? true : false} tag={CustomInput} type=\"checkbox\" name={`groupCaptured-${this.props.groupUUID}`} label=\"Capture\" />\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col md=\"6\" xs=\"6\">\r\n                                        <Button id=\"button-fluid\" color=\"secondary\" onClick={this.addNewRule}><FontAwesomeIcon icon={faPlus} /></Button>\r\n                                    </Col>\r\n                                    <Col md=\"6\" xs=\"6\">\r\n                                        <Button id=\"button-fluid\" color=\"secondary\" onClick={this.removeRule}><FontAwesomeIcon icon={faMinus} /></Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            </AvGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </AvForm>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CaptureGroupBuilder;","import React, { Component } from 'react';\r\nimport { Row, Col, CustomInput, FormGroup, Toast, ToastHeader, ToastBody, Button, Badge } from \"reactstrap\";\r\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPlus, faMinus } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport CaptureGroupBuilder from './CaptureGroupBuilder';\r\n\r\nclass CapturePatternBuilder extends Component {\r\n    currentID = 0\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // this.handleValidSubmit = this.handleValidSubmit.bind(this);\r\n        // this.handleInvalidSubmit = this.handleInvalidSubmit.bind(this);\r\n        this.addNewRule = this.addNewRule.bind(this);\r\n        this.removeRule = this.removeRule.bind(this);\r\n        this.addFirstGroup = this.addFirstGroup.bind(this);\r\n        this.generateCapturePattern = this.generateCapturePattern.bind(this);\r\n\r\n        this.state = {\r\n            captureGroups: [{\r\n                uuid: this.currentID,\r\n                ref: React.createRef()\r\n            }],\r\n            pattern: undefined,\r\n            output: undefined\r\n        }\r\n\r\n    }\r\n\r\n    // handleValidSubmit(groupPattern) {\r\n    //     console.log(\"CapturePatternBuilder::handleValidSubmit \", groupPattern);\r\n\r\n    // }\r\n\r\n    // handleInvalidSubmit(values) {\r\n    //     console.log(\"CapturePatternBuilder::handleInvalidSubmit \", values);\r\n\r\n    // }\r\n\r\n    addFirstGroup() {\r\n        console.log(\"CapturePatternBuilder::addFirstGroup\");\r\n        this.currentID = 0;\r\n        this.setState({\r\n            captureGroups: [{\r\n                uuid: this.currentID,\r\n                groups: React.createRef()\r\n            }]\r\n        })\r\n    }\r\n\r\n    generateCapturePattern() {\r\n        let patternStr = \"\";\r\n        const capture = [];\r\n        this.state.captureGroups.map((captureGroup, index) => {\r\n            patternStr +=  captureGroup.ref.current.state.pattern\r\n            if(captureGroup.ref.current.state.capturePattern){\r\n                capture.push(true);\r\n            } else {\r\n                capture.push(false);\r\n            }\r\n        })\r\n\r\n        this.setState({\r\n            pattern: patternStr\r\n        })\r\n        const tokens = this.props.text.match(new RegExp(patternStr), 'gi');\r\n        tokens.shift();\r\n        console.log(\"PA1 \", tokens);\r\n        const value = tokens.map((token, index) =>{\r\n            if(capture[index] === true){\r\n                return token;\r\n            }\r\n        })\r\n        console.log(\"PA2 \", value);\r\n        this.setState({\r\n            output:  value.join(' ')\r\n        })\r\n    }\r\n\r\n    addNewRule(groupUUID) {\r\n        // console.log(\"CapturePatternBuilder::addNewRule groupUUID\", groupUUID, this.state.captureGroups)\r\n\r\n        let nextGroupIndex = -1;\r\n        for (let groupIndex = 0; groupIndex < this.state.captureGroups.length; groupIndex = groupIndex + 1) {\r\n            if (this.state.captureGroups[groupIndex].uuid === groupUUID)\r\n                nextGroupIndex = groupIndex + 1;\r\n        }\r\n        this.currentID++;\r\n        this.state.captureGroups.splice(nextGroupIndex, 0, {\r\n            uuid: this.currentID,\r\n            ref: React.createRef()\r\n        })\r\n\r\n        this.setState({\r\n            captureGroups: this.state.captureGroups\r\n        })\r\n    }\r\n\r\n    removeRule(groupUUID) {\r\n        // console.log(\"CapturePatternBuilder::removeRule groupUUID\", groupUUID, this.state.captureGroups)\r\n\r\n        let currentGroupIndex = -1;\r\n        for (let groupIndex = 0; groupIndex < this.state.captureGroups.length; groupIndex = groupIndex + 1) {\r\n            if (this.state.captureGroups[groupIndex].uuid === groupUUID)\r\n                currentGroupIndex = groupIndex;\r\n        }\r\n\r\n        if (currentGroupIndex !== -1) {\r\n            this.state.captureGroups.splice(currentGroupIndex, 1)\r\n            this.setState({\r\n                captureGroups: this.state.captureGroups\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {\r\n                    this.state.captureGroups.map((captureGroup, index) => (\r\n                        <CaptureGroupBuilder ref={captureGroup.ref} key={captureGroup.uuid} groupUUID={captureGroup.uuid}\r\n                            prefixOptions={[\r\n                                {\r\n                                    value: \"Single Space\",\r\n                                    pattern: \"\\\\s\"\r\n                                },\r\n                                {\r\n                                    value: \"One or more Space\",\r\n                                    pattern: \"\\\\s*\"\r\n                                }\r\n                            ]}\r\n\r\n                            postfixOptions={[\r\n                                {\r\n                                    value: \"One or more Space\",\r\n                                    pattern: \"\\\\s*\"\r\n                                },\r\n                                {\r\n                                    value: \"String\",\r\n                                    pattern: \"[a-z,A-Z]*\"\r\n\r\n                                },\r\n                                {\r\n                                    value: \"Number\",\r\n                                    pattern: \"[0-9,.]+\"\r\n                                },\r\n                            ]}\r\n\r\n                            // _handleValidSubmit={this.handleValidSubmit}\r\n                            // _handleInvalidSubmit={this.handleInvalidSubmit}\r\n                            _addNewRule={this.addNewRule}\r\n                            _removeRule={this.removeRule}\r\n                        ></CaptureGroupBuilder>\r\n                    ))\r\n                }\r\n                <Row className=\"mb-2 mt-2 ml-2 mr-2\" >\r\n                    <Col>\r\n                        <Button id=\"button-fluid\"\r\n                            onClick={this.state.captureGroups.length === 0 ?\r\n                                this.addFirstGroup :\r\n                                this.generateCapturePattern}>\r\n                            {\r\n                                this.state.captureGroups.length === 0 ? <FontAwesomeIcon icon={faPlus} /> : \"Generate\"\r\n\r\n                            }\r\n                        </Button>\r\n\r\n\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mb-2 mt-2 ml-2 mr-2\">\r\n                    <Col>\r\n                        <Toast id=\"toast-fluid\">\r\n                            <ToastHeader>Pattern </ToastHeader>\r\n                            <ToastBody>\r\n                                {this.state.pattern}\r\n                                {this.state.output}\r\n                            </ToastBody>\r\n                        </Toast>\r\n                    </Col>                    \r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CapturePatternBuilder;","import React, { Component } from 'react';\r\nimport { Row, Col, CustomInput, FormGroup, Toast, ToastHeader, ToastBody, Button, Badge } from \"reactstrap\";\r\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\r\n\r\nimport CapturePatternBuilder from './CapturePatternBuilder';\r\n\r\nconst myText = 'BUY #GBPUSD @1.83600\\\r\nTp @ 1.84200\\\r\nTp2 @ 1.84700\\\r\n Buy 2 @1.82600\\\r\nTP @ 1.83600\\\r\nSL 1.81600'\r\nclass FieldDefBuilder extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n\r\n        this.state = {\r\n            telegramMessage: undefined\r\n        }\r\n    }\r\n\r\n    handleChange(event) {\r\n        console.log(\"Event \", event)\r\n        this.setState({\r\n            telegramMessage: event.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div >\r\n                <AvForm>\r\n                    <Row className=\"mb-2 mt-2 ml-2 mr-2\">\r\n                        <Col md=\"6\" xs=\"12\">\r\n                            <Toast id=\"toast-fluid\">\r\n                                <ToastHeader>Telegram Signal </ToastHeader>\r\n                                <ToastBody>\r\n                                    <FormGroup>\r\n                                        <AvField\r\n                                            name=\"telegramMessage\"\r\n                                            type=\"textarea\"\r\n                                            validate={{\r\n                                                required: {\r\n                                                    value: true,\r\n                                                    errorMessage: 'Telegram Message is required'\r\n                                                }\r\n                                            }}\r\n                                            onChange={this.handleChange}\r\n                                            value={this.state.telegramMessage}\r\n                                        />\r\n                                    </FormGroup>\r\n                                </ToastBody>\r\n                            </Toast>\r\n                        </Col>\r\n                        <Col md=\"6\" xs=\"12\">\r\n                            {/* <ToolTip id=\"outgoing-message\" message=\"Generated Message Routed to MT4\" placement=\"bottom\"/> */}\r\n                            <Toast id=\"toast-fluid\">\r\n                                <ToastHeader>Trade Signal </ToastHeader>\r\n                                <ToastBody>\r\n                 \r\n                                </ToastBody>\r\n                            </Toast>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <CapturePatternBuilder text={this.state.telegramMessage}></CapturePatternBuilder>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                </AvForm>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FieldDefBuilder;\r\n\r\n// {\r\n//     this.state.isValid ?\r\n//         this.state && this.state.outputMessageFields && this.state.outputMessageFields.map((field, index) =>\r\n//             <span id=\"outgoing-field\" key={index} className=\"btn btn-outline-secondary\">{field.name}<Badge color=\"secondary\" className=\"rounded ml-2\">{field.value}</Badge> </span>)\r\n//         : <span id=\"outgoing-field\" className=\"btn btn-outline-danger\">Validation Failed<Badge color=\"danger\" className=\"rounded ml-2\"><i className=\"fas fa-exclamation-triangle\"></i></Badge> </span>\r\n// }","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport CapturePatternBuilder from './editor/CapturePatternBuilder';\nimport FieldDefBuilder from './editor/FieldDefBuilder';\nimport ExpressionBuilder from './editor/ExpressionBuilder';\n// function handleValidSubmit(values) {\n//   console.log(\"_handleValidSubmit \", values);\n\n// }\n\n// function handleInvalidSubmit(values) {\n//   console.log(\"_handleInvalidSubmit \", values);\n\n// }\n\n// function addNewRule(){\n//   console.log(\"_addNewRule \");\n// }\n\n// function removeRule(){\n//   console.log(\"_removeRule \",);\n// }\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FieldDefBuilder></FieldDefBuilder>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}