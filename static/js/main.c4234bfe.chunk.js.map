{"version":3,"sources":["logo.svg","editor/CaptureGroupBuilder.jsx","editor/CapturePatternBuilder.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","CaptureGroupBuilder","props","handleValidSubmit","bind","handleInvalidSubmit","addNewRule","removeRule","getPatternOf","state","uuid","groupUUID","prefix","undefined","text","postfix","freezeGroup","capturePattern","event","values","prefixId","this","textId","postfixId","freezeGroupId","setState","prefixPattern","prefixOptions","postfixPattern","postfixOptions","console","log","pattern","alphabetArray","alphabetValue","JSON","stringify","alphabet","value","_addNewRule","_removeRule","Fragment","onValidSubmit","onInvalidSubmit","Row","Col","md","xs","name","type","disabled","map","prefixOption","index","key","postfixOption","Button","color","tag","CustomInput","label","onClick","icon","faPlus","faMinus","Component","CapturePatternBuilder","currentID","addFirstGroup","generateCapturePattern","captureGroups","ref","React","createRef","groups","patternStr","captureGroup","captureGroupInputs","current","nextGroupIndex","groupIndex","length","splice","currentGroupIndex","id","Toast","ToastHeader","ToastBody","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c4234bfe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport { Row, Col, CustomInput, FormGroup, Toast, ToastHeader, ToastBody, Button, Badge, Label } from \"reactstrap\";\r\nimport { AvForm, AvField, AvInput } from 'availity-reactstrap-validation';\r\nimport AvGroup from 'availity-reactstrap-validation/lib/AvGroup';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPlus, faMinus } from '@fortawesome/free-solid-svg-icons'\r\n\r\nclass CaptureGroupBuilder extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleValidSubmit = this.handleValidSubmit.bind(this);\r\n        this.handleInvalidSubmit = this.handleInvalidSubmit.bind(this);\r\n        this.addNewRule = this.addNewRule.bind(this);\r\n        this.removeRule = this.removeRule.bind(this);\r\n        this.getPatternOf = this.getPatternOf.bind(this);\r\n\r\n        this.state = {\r\n            uuid: props.groupUUID,\r\n            prefix: undefined,\r\n            text: undefined,\r\n            postfix: undefined,\r\n            freezeGroup: false,\r\n            capturePattern: undefined\r\n        }\r\n    }\r\n\r\n    handleValidSubmit(event, values) {\r\n        // console.log(\"handleValidSubmit \", event, values);\r\n\r\n        const prefixId = `groupPrefix-${this.props.groupUUID}`;\r\n        const textId = `groupText-${this.props.groupUUID}`;\r\n        const postfixId = `groupPostfix-${this.props.groupUUID}`;\r\n        const groupCapturedId = `groupCaptured-${this.props.groupUUID}`;\r\n        const freezeGroupId = `freezeGroup-${this.props.groupUUID}`;\r\n\r\n        this.setState({\r\n            prefix: values[prefixId],\r\n            text: values[textId],\r\n            postfix: values[postfixId],\r\n            freezeGroup:  values[freezeGroupId]\r\n        })\r\n        const prefixPattern  = this.getPatternOf(this.props.prefixOptions, this.state.prefix);\r\n        const postfixPattern = this.getPatternOf(this.props.postfixOptions, this.state.postfix);\r\n        console.log(\"prefixPattern\", prefixPattern);\r\n        console.log(\"postfixPattern\", postfixPattern);\r\n        this.setState({\r\n            pattern: `(${prefixPattern}${this.state.text}${postfixPattern})`\r\n        })\r\n    }\r\n\r\n    getPatternOf(alphabetArray, alphabetValue) {\r\n        console.log(`pattern of ${alphabetValue} from ${JSON.stringify(alphabetArray)}`)\r\n        for(const alphabet of alphabetArray){\r\n            if(alphabet.value === alphabetValue)\r\n                 return alphabet.pattern;\r\n        }\r\n    }\r\n\r\n    handleInvalidSubmit(event, values) {\r\n        console.log(\"handleInvalidSubmit \",  event, values);\r\n        // this.props._handleInValidSubmit(this.props.groupUUID, values);\r\n    }\r\n\r\n    addNewRule(){\r\n        // console.log(\"addNewRule event triggered from\");\r\n        this.props._addNewRule(this.props.groupUUID);\r\n    }\r\n\r\n    removeRule(){\r\n        // console.log(\"removeRule\");\r\n        this.props._removeRule(this.props.groupUUID);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <AvForm\r\n                    onValidSubmit={this.handleValidSubmit}\r\n                    onInvalidSubmit={this.handleInvalidSubmit}>\r\n                    \r\n                    <Row>\r\n                        <Col md=\"3\" xs=\"12\">\r\n                            <AvGroup>\r\n                                <AvField\r\n                                    name={`groupPrefix-${this.props.groupUUID}`}\r\n                                    type=\"select\"\r\n                                    disabled={this.state.freezeGroup ? true : false}\r\n                                >\r\n                                    {\r\n                                        this.props.prefixOptions.map((prefixOption, index)=>(\r\n                                            <option key={index}>{prefixOption.value}</option>\r\n\r\n                                        ))\r\n                                    }\r\n                                </AvField>\r\n                            </AvGroup>\r\n                        </Col>\r\n                        <Col md=\"3\" xs=\"12\">\r\n                            <AvGroup>\r\n                                <AvField\r\n                                    name={`groupText-${this.props.groupUUID}`}\r\n                                    type=\"text\"\r\n                                    disabled={this.state.freezeGroup ? true : false}\r\n\r\n                                />\r\n                            </AvGroup>\r\n                        </Col>\r\n                        <Col md=\"3\" xs=\"12\">\r\n                            <AvGroup>\r\n                                <AvField\r\n                                    name={`groupPostfix-${this.props.groupUUID}`}\r\n                                    type=\"select\"\r\n                                    disabled={this.state.freezeGroup ? true : false}\r\n\r\n                                >\r\n                                    {\r\n                                        this.props.postfixOptions.map((postfixOption, index)=>(\r\n                                            <option key={index}>{postfixOption.value}</option>\r\n\r\n                                        ))\r\n                                    }\r\n                                </AvField>\r\n                            </AvGroup>\r\n                        </Col>\r\n                        <Col md=\"3\" xs=\"12\">\r\n                            <AvGroup>\r\n                                <Row>\r\n                                    <Col md=\"4\" xs=\"4\">\r\n                                        <Button color=\"secondary\">\r\n                                            <AvInput  disabled={this.state.freezeGroup ? true : false} tag={CustomInput} type=\"checkbox\" name={`groupCaptured-${this.props.groupUUID}`} label=\"Capture\"  />\r\n                                        </Button>\r\n                                    </Col>\r\n                                    <Col md=\"4\" xs=\"4\">\r\n                                        <Button color=\"secondary\">\r\n                                            <AvInput  disabled={this.state.freezeGroup ? true : false} tag={CustomInput} type=\"checkbox\" name={`freezeGroup-${this.props.groupUUID}`} label=\"Freeze\"  />\r\n                                        </Button>\r\n                                    </Col>\r\n                                    <Col md=\"2\" xs=\"2\">\r\n                                        <Button color=\"secondary\" onClick={this.addNewRule}><FontAwesomeIcon icon={faPlus} /></Button>\r\n                                    </Col>\r\n                                    <Col md=\"2\" xs=\"2\">\r\n                                        <Button color=\"secondary\"  onClick={this.removeRule}><FontAwesomeIcon icon={faMinus} /></Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            </AvGroup>                     \r\n                        </Col>\r\n                    </Row>\r\n                </AvForm>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CaptureGroupBuilder;","import React, { Component } from 'react';\r\nimport { Row, Col, CustomInput, FormGroup, Toast, ToastHeader, ToastBody, Button, Badge } from \"reactstrap\";\r\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPlus, faMinus } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport CaptureGroupBuilder from './CaptureGroupBuilder';\r\n\r\nclass CapturePatternBuilder extends Component {\r\n    currentID = 0\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // this.handleValidSubmit = this.handleValidSubmit.bind(this);\r\n        // this.handleInvalidSubmit = this.handleInvalidSubmit.bind(this);\r\n        this.addNewRule = this.addNewRule.bind(this);\r\n        this.removeRule = this.removeRule.bind(this);\r\n        this.addFirstGroup = this.addFirstGroup.bind(this);\r\n        this.generateCapturePattern = this.generateCapturePattern.bind(this);\r\n\r\n        this.state = {\r\n            captureGroups: [{\r\n                uuid: this.currentID,\r\n                ref: React.createRef()\r\n            }],\r\n            pattern: undefined\r\n        }\r\n\r\n    }\r\n\r\n    // handleValidSubmit(groupPattern) {\r\n    //     console.log(\"CapturePatternBuilder::handleValidSubmit \", groupPattern);\r\n\r\n    // }\r\n\r\n    // handleInvalidSubmit(values) {\r\n    //     console.log(\"CapturePatternBuilder::handleInvalidSubmit \", values);\r\n\r\n    // }\r\n\r\n    addFirstGroup() {\r\n        console.log(\"CapturePatternBuilder::addFirstGroup\");\r\n        this.currentID = 0;\r\n        this.setState({\r\n            captureGroups: [{\r\n                uuid: this.currentID,\r\n                groups: React.createRef()\r\n            }]\r\n        })\r\n    }\r\n\r\n    generateCapturePattern() {\r\n        // console.log(\"CapturePatternBuilder::generateCapturePattern\");\r\n        let patternStr = \"\";\r\n        this.state.captureGroups.map((captureGroup, index) => {\r\n            const captureGroupInputs = captureGroup.ref.current.state;\r\n            patternStr +=  captureGroupInputs.pattern\r\n        })\r\n\r\n        this.setState({\r\n            pattern: patternStr\r\n        })\r\n        console.log(\"PATTERN \", this.state.pattern);\r\n\r\n    }\r\n\r\n    addNewRule(groupUUID) {\r\n        // console.log(\"CapturePatternBuilder::addNewRule groupUUID\", groupUUID, this.state.captureGroups)\r\n\r\n        let nextGroupIndex = -1;\r\n        for (let groupIndex = 0; groupIndex < this.state.captureGroups.length; groupIndex = groupIndex + 1) {\r\n            if (this.state.captureGroups[groupIndex].uuid === groupUUID)\r\n                nextGroupIndex = groupIndex + 1;\r\n        }\r\n        this.currentID++;\r\n        this.state.captureGroups.splice(nextGroupIndex, 0, {\r\n            uuid: this.currentID,\r\n            ref: React.createRef()\r\n        })\r\n\r\n        this.setState({\r\n            captureGroups: this.state.captureGroups\r\n        })\r\n    }\r\n\r\n    removeRule(groupUUID) {\r\n        // console.log(\"CapturePatternBuilder::removeRule groupUUID\", groupUUID, this.state.captureGroups)\r\n\r\n        let currentGroupIndex = -1;\r\n        for (let groupIndex = 0; groupIndex < this.state.captureGroups.length; groupIndex = groupIndex + 1) {\r\n            if (this.state.captureGroups[groupIndex].uuid === groupUUID)\r\n                currentGroupIndex = groupIndex;\r\n        }\r\n\r\n        if (currentGroupIndex !== -1) {\r\n            this.state.captureGroups.splice(currentGroupIndex, 1)\r\n            this.setState({\r\n                captureGroups: this.state.captureGroups\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {\r\n                    this.state.captureGroups.map((captureGroup, index) => (\r\n                        <CaptureGroupBuilder ref={captureGroup.ref} key={captureGroup.uuid} groupUUID={captureGroup.uuid}\r\n                            prefixOptions={[\r\n                                {\r\n                                    value: \"Single Space\",\r\n                                    pattern: \"\\\\s\"\r\n                                },\r\n                                {\r\n                                    value: \"One or more Space\",\r\n                                    pattern: \"\\\\s*\"\r\n                                }\r\n                            ]}\r\n\r\n                            postfixOptions={[\r\n                                {\r\n                                    value: \"One or more Space\",\r\n                                    pattern: \"\\\\s*\"\r\n                                },\r\n                                {\r\n                                    value: \"String\",\r\n                                    pattern: \"[a-z,A-Z]*\"\r\n\r\n                                },\r\n                                {\r\n                                    value: \"Number\",\r\n                                    pattern: \"[0-9,.]+\"\r\n                                },\r\n                            ]}\r\n\r\n                            // _handleValidSubmit={this.handleValidSubmit}\r\n                            // _handleInvalidSubmit={this.handleInvalidSubmit}\r\n                            _addNewRule={this.addNewRule}\r\n                            _removeRule={this.removeRule}\r\n                        ></CaptureGroupBuilder>\r\n                    ))\r\n                }\r\n                <Row>\r\n                    <Col>\r\n                        <Button id=\"button-fluid\"\r\n                            onClick={this.state.captureGroups.length === 0 ?\r\n                                this.addFirstGroup :\r\n                                this.generateCapturePattern}>\r\n                            {\r\n                                this.state.captureGroups.length === 0 ? <FontAwesomeIcon icon={faPlus} /> : \"Generate\"\r\n\r\n                            }\r\n                        </Button>\r\n\r\n\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Toast id=\"toast-fluid\">\r\n                            <ToastHeader>Pattern </ToastHeader>\r\n                            <ToastBody>\r\n                                {this.state.pattern}\r\n                            </ToastBody>\r\n                        </Toast>\r\n                    </Col>                    \r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CapturePatternBuilder;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport CapturePatternBuilder from './editor/CapturePatternBuilder';\n// function handleValidSubmit(values) {\n//   console.log(\"_handleValidSubmit \", values);\n\n// }\n\n// function handleInvalidSubmit(values) {\n//   console.log(\"_handleInvalidSubmit \", values);\n\n// }\n\n// function addNewRule(){\n//   console.log(\"_addNewRule \");\n// }\n\n// function removeRule(){\n//   console.log(\"_removeRule \",);\n// }\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CapturePatternBuilder></CapturePatternBuilder>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}